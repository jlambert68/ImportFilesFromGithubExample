		// Tengo script to create an array of 10 random numbers

		rand := import("rand")
		math := import("math")
		fmt := import("fmt")

		// Define the length of the array
		//length := 20
		//numberOfDecimals := 2
		//maxIntegerPartSize := 2


        // ***********************************************************************************
        // round
        // Function to round a float to a specific number of decimal places

        round := func(x, places) {
            shift := math.pow(10, places)
            return math.floor(x * shift + 0.5) / shift
        }

        // ***********************************************************************************



        // ***********************************************************************************
        // formatFloat
        // Function to format a float with a specific number of decimals

        formatFloat := func(number, numberOfDecimals) {
            str := string(number) // Convert the number to a string

            // Find the position of the decimal point
            dotIndex := -1
            for i := 0; i < len(str); i++ {
                if str[i] == '.' {
                    dotIndex = i
                    break
                }
            }

            // Add a decimal point if it doesn't exist
            if numberOfDecimals > 0 {
                if dotIndex == -1 {
                    dotIndex = len(str)
                    str += "."
                }
            }


            // Calculate the number of decimal places currently in the string
            currentDecimals := len(str) - dotIndex - 1


            // Add zeros to reach the desired number of decimal places
            for currentDecimals < numberOfDecimals {
                str = str + "0"
                currentDecimals++
            }


            return str
        }

        // ***********************************************************************************




		// ***********************************************************************************
		// randomize
		// Function to generate random numbers

		randomize := func(index, maxIntegerPartSize, numberOfDecimals, testCaseUuidRandomizer) {
		    rand.seed(testCaseUuidRandomizer + index)

		    // Generate Integer part of random number
		    randomIntegerPart :=  rand.float()

		    integerPart := math.floor(math.pow(10, maxIntegerPartSize) * randomIntegerPart)


		    // Generate Decimal part of random number
		    randomDecimalPart :=  rand.float()

		    decimalPart := 0

		    if numberOfDecimals > 0 {

		         decimalPart = math.floor(math.pow(10, numberOfDecimals) * randomDecimalPart)
		    }


		    // Combine Integer and decimal part into one random number
		    randomNumber := integerPart + math.pow(10, -1 * numberOfDecimals) * decimalPart


            randomNumber = round(randomNumber, numberOfDecimals)

			return randomNumber
		}

		// ***********************************************************************************

		/*
		// Create an empty array
		array := []

		// Fill the array to the desired length
		for i := 0; i < length; i++ {
    		array = append(array, "")  // Initialize with default value (e.g., 0)
		}

		tempValueAsFloat := 0.0

		// Fill the array with random numbers
		for i, v in array {       // array: index and element
            // 'i' is index
             // 'v' is value
             tempValueAsFloat = randomize(0, i, maxIntegerPartSize, numberOfDecimals)


             array[i] = formatFloat(tempValueAsFloat, numberOfDecimals)


        }
        */

         // ***********************************************************************************
		// SubCustody_RandomFloatValue_ArrayValue // SubCustody.RandomFloatValue[n](maxIntegerPartSize, numberOfDecimals)
        //
		// Function to generate random value with a specif max number of integer and speciic number of decimals
		// inputArray := [arrayPosition, maxIntegerPartSize, numberOfDecimals, testCaseUuidRandomizer]


        SubCustody_RandomFloatValue_ArrayValue := func(inputArray) {

            // Extract values from input array
            arrayPosition := inputArray[0]
            maxIntegerPartSize := inputArray[1]
            numberOfDecimals := inputArray[2]
            testCaseUuidRandomizer := inputArray[3]


            // From users perspektive, position "0" is the number "1"
            arrayPosition = arrayPosition - 1

            if arrayPosition < 0 {
                arrayPosition = 0
            }

            // Generate Random number based on array position
            tempValueAsFloat := randomize(arrayPosition, maxIntegerPartSize, numberOfDecimals, testCaseUuidRandomizer)

            // Format the value into a string
             SubCustody_RandomFloatValue_ArrayValue_out := formatFloat(tempValueAsFloat, numberOfDecimals)

             return SubCustody_RandomFloatValue_ArrayValue_out

        }


        // ***********************************************************************************



        // ***********************************************************************************
		// SubCustody_RandomFloatValue // SubCustody.RandomFloatValue(maxIntegerPartSize, numberOfDecimals)
		//
		// Function to generate random value with a specif max number of integer and speciic number of decimals
		// Always use array value 1, first array position from user perspective
		//
		// inputArray := [maxIntegerPartSize, numberOfDecimals, testCaseUuidRandomizer]

        SubCustody_RandomFloatValue := func(inputArray) {

            // Extract values from input array
            inputArray2 := [inputArray[0], 1, inputArray[2], inputArray[2]]


            SubCustody_RandomFloatValue_out := SubCustody_RandomFloatValue_ArrayValue(inputArray2)

            return SubCustody_RandomFloatValue_out

        }



        // ***********************************************************************************

/*

		fmt.println(SubCustody_RandomFloatValue([numberOfDecimals, maxIntegerPartSize, 0]))

		fmt.println(SubCustody_RandomFloatValue_ArrayValue([3, numberOfDecimals, maxIntegerPartSize, 0]))

		fmt.println(SubCustody_RandomFloatValue([numberOfDecimals, maxIntegerPartSize, 1]))

		fmt.println(SubCustody_RandomFloatValue_ArrayValue([3, numberOfDecimals, maxIntegerPartSize, 1]))

*/

